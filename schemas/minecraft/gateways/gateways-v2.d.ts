/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A V2 gateway datapack file used to define a new Gateway for the Gateways To Eternity mod.
 */
export type GatewaysToEternityGatewayV2 =
  | NormalGateway
  | EndlessGateway
  | InvalidGateway;
export type GatewaySize = "small" | "medium" | "large";
export type GatewayColor =
  | (
      | "black"
      | "dark_blue"
      | "dark_green"
      | "dark_aqua"
      | "dark_red"
      | "dark_purple"
      | "gold"
      | "gray"
      | "dark_gray"
      | "blue"
      | "green"
      | "aqua"
      | "red"
      | "light_purple"
      | "yellow"
      | "white"
      | "minecoin_gold"
      | "material_quartz"
      | "material_iron"
      | "material_netherite"
      | "material_redstone"
      | "material_copper"
      | "material_gold"
      | "material_emerald"
      | "material_diamond"
      | "material_lapis"
      | "material_amethyst"
      | "rainbow"
    )
  | string;
export type CompoundTag =
  | string
  | {
      [k: string]: unknown;
    };
export type GatewayWaveModifier =
  | {
      type: "gateways:mob_effect";
      effect: {
        /**
         * Chance that this potion will be applied. 1.0 = 100%
         */
        chance?: number;
        /**
         * Registry name of the Effect to use.
         */
        effect: string;
        amplifier?: GatewayStepFunction;
        ambient?: boolean;
        visible?: boolean;
      };
    }
  | {
      type: "gateways:attribute";
      /**
       * The registry name of the Attribute to modify.
       */
      attribute: string;
      /**
       * The operation of the modifier.
       */
      operation: "addition" | "multiply_base" | "multiply_total";
      value: GatewayStepFunction;
    }
  | {
      type: "gateways:gear_set";
      /**
       * Registry name of the gear set to use.
       */
      gear_set: string;
    };
export type GatewayStepFunction =
  | number
  | {
      /**
       * Minimum value of the output range.
       */
      min: number;
      /**
       * The total number of steps that the function has.
       */
      steps: number;
      /**
       * The value that an individual step will increase the output by.
       */
      step: number;
    };
export type GatewayReward =
  | {
      type: "gateways:stack";
      stack: ItemStack;
    }
  | {
      type: "gateways:stack_list";
      stacks: ItemStack[];
    }
  | {
      type: "gateways:entity_loot";
      entity: string;
      /**
       * NBT data that will be loaded onto the entity before evaluating the loot table.
       */
      nbt?:
        | string
        | {
            [k: string]: unknown;
          };
      /**
       * The number of times the loot table will be rolled. Default value = 1.
       */
      rolls?: number;
    }
  | {
      type: "gateways:loot_table";
      loot_table: string;
      /**
       * The number of times the loot table will be rolled. Default value = 1.
       */
      rolls?: number;
      /**
       * Lang key (or english text) which will be used to display the reward in the tooltip.
       */
      desc: string;
    }
  | {
      type: "gateways:command";
      /**
       * The command string, without a leading slash.
       */
      command: string;
      /**
       * Lang Key (or english text) which will be used to display the reward in the tooltip.
       */
      desc: string;
    }
  | {
      type: "gateways:experience";
      experience: number;
      /**
       * The size of the experience orbs that will be generated. A larger value will cause fewer individual orbs to generate. Default value = 5.
       */
      orb_size?: number;
    }
  | {
      type: "gateways:summon";
      entity: GatewayWaveEntity;
    }
  | {
      type: "gateways:chanced";
      /**
       * The chance the reward is granted. 1 is 100%
       */
      chance: number;
      reward: GatewayReward;
    };
export type GatewayRewards = GatewayReward[];
export type GatewayWaves = GatewayWave[];
export type GatewayFailure =
  | {
      type: "gateways:explosion";
      strength: number;
      /**
       * If the explosion will cause fire to spawn.
       */
      fire: boolean;
      /**
       * If the explosion will damage blocks.
       */
      block_damage: boolean;
    }
  | {
      type: "gateways:mob_effect";
      effect: string;
      /**
       * Duration, in ticks, of the effect.
       */
      duration: number;
      /**
       * Effect amplifier. A value of zero corresponds to level 1.
       */
      amplifier: number;
    }
  | {
      type: "gateways:summon";
      entity: GatewayWaveEntity;
    }
  | {
      type: "gateways:command";
      /**
       * The command string, without a leading slash.
       */
      command: string;
      /**
       * Lang Key (or english text) which will be used to display the failure in the tooltip.
       */
      desc: string;
    }
  | {
      type: "gateways:chanced";
      /**
       * The chance the reward is granted. 1 is 100%
       */
      chance: number;
    };
export type GatewayFailures = GatewayFailure[];
export type GatewaySpawnAlgorithm =
  | "gateways:open_field"
  | "gateways:inward_spiral";
export type EndlessGatewayModifiers = EndlessGatewayModifier[];

/**
 * A Normal (or "Classic") Gateway defines a predefined list of waves, modifiers, rewards, and failure penalties.
 */
export interface NormalGateway {
  __typename: "NormalGateway";
  type?: "gateways:normal";
  size: GatewaySize;
  color: GatewayColor;
  waves: GatewayWaves;
  rewards?: GatewayRewards;
  failures?: GatewayFailures;
  spawn_algorithm?: GatewaySpawnAlgorithm;
  rules?: GatewayRules;
  boss_event?: GatewayBossEventSettings;
}
export interface GatewayWave {
  entities: GatewayWaveEntity[];
  /**
   * A list of wave modifiers to be applied to all spawned entities.
   */
  modifiers?: GatewayWaveModifier[];
  rewards?: GatewayRewards;
  /**
   * The maximum time (in ticks) that a player may take to complete this wave.
   */
  max_wave_time: number;
  /**
   * The setup time (in ticks) before this wave begins, after the last wave was completed.
   */
  setup_time: number;
}
export interface GatewayWaveEntity {
  type?: "gateways:standard";
  /**
   * Registry name of the entity being spawned.
   */
  entity: string;
  /**
   * Lang key used when this wave entity is displayed in a tooltip. If absent, the default lang key of the entity type used.
   */
  desc?: string;
  nbt?: CompoundTag;
  /**
   * A list of wave modifiers for the entity.
   */
  modifiers?: GatewayWaveModifier[];
  /**
   * The number of copies of this entity to spawn.
   */
  count?: number;
  /**
   * Prevents addition of default equipment
   */
  finalize_spawn?: boolean;
}
export interface ItemStack {
  /**
   * Registry name of the item to load.
   */
  item: string;
  /**
   * If this stack is optional, and will produce an empty stack instead of throwing an error when the item is not found. Default value = false.
   */
  optional?: boolean;
  count?: number;
  nbt?: CompoundTag;
  cap_nbt?: CompoundTag;
}
export interface GatewayRules {
  /**
   * The spawn range as a radius in blocks in which mobs may spawn around the gateway, from the edges of the gateway. Default value = 8.
   */
  spawn_range?: number;
  /**
   * The distance that a wave entity may be from the center of the Gateway before out-of-bounds rules are triggered. Default value = 32.
   */
  leash_range?: number;
  /**
   * If entities marked as discarded are counted as valid kills. Default value = false.
   */
  allow_discarding?: boolean;
  /**
   * If entities marked as changed dimension are counted as valid kills. Default value = false.
   */
  allow_dim_change?: boolean;
  /**
   * If wave entities may only be hurt by damage that is sourced to a player. Default value = false.
   */
  player_damage_only?: boolean;
  /**
   * If the wave entities will be removed if the Gateway is failed. Default value = true.
   */
  remove_mobs_on_failure?: boolean;
  /**
   * If true, when out-of-bounds rules are triggered, the Gateway will fail. If false, the entity will be re-placed using the spawn algorithm. Default value = false.
   */
  fail_on_out_of_bounds?: boolean;
  /**
   * The distance that this gateway must be from another Gateway. Default value = 0.
   */
  spacing?: number;
}
export interface GatewayBossEventSettings {
  /**
   *  The drawing mode of the boss bar. Default value = "boss_bar".
   */
  mode?: "boss_bar" | "name_plate";
  /**
   * If the current mode is "boss_bar", this controls if fog is enabled. Has no effect when the mode is "name_plate". Default value = true.
   */
  fog?: boolean;
}
/**
 * An Endless Gateway defines a base waves and a series of Endless Modifiers, which will augment the Gateway as it runs. The Gateway will continue running until a wave fails, at which point it will close.
 */
export interface EndlessGateway {
  __typename: "EndlessGateway";
  type: "gateways:endless";
  size: GatewaySize;
  color: GatewayColor;
  base_wave: GatewayWave1;
  modifiers: EndlessGatewayModifiers;
  failures?: GatewayFailures;
  spawn_algorithm?: GatewaySpawnAlgorithm;
  rules?: GatewayRules;
  boss_event?: GatewayBossEventSettings;
}
/**
 * The base wave for this Gateway. It will be augmented by the provided Endless Modifiers as waves pass.
 */
export interface GatewayWave1 {
  entities: GatewayWaveEntity[];
  /**
   * A list of wave modifiers to be applied to all spawned entities.
   */
  modifiers?: GatewayWaveModifier[];
  rewards?: GatewayRewards;
  /**
   * The maximum time (in ticks) that a player may take to complete this wave.
   */
  max_wave_time: number;
  /**
   * The setup time (in ticks) before this wave begins, after the last wave was completed.
   */
  setup_time: number;
}
export interface EndlessGatewayModifier {
  application_mode:
    | {
        type: "gateways:after_wave";
        /**
         * The wave on which the modifier(s) are applied. The modifier remains applied on subsequent waves.
         */
        wave: number;
      }
    | {
        type: "gateways:after_every_n_waves";
        /**
         * The number of waves that must elapse before the modifier(s) are applied and reapplied.
         */
        waves: number;
        /**
         * The maximum number of times the modifier(s) will be applied.
         */
        max: number;
      }
    | {
        type: "gateways:only_on_wave";
        /**
         * The wave on which the modifier(s) apply.
         */
        wave: number;
      }
    | {
        type: "gateways:only_on_every_n_waves";
        /**
         * The number of waves that must elapse between applications.
         */
        waves: number;
      };
  /**
   * A list of additional entities that will be spawned each time the modifier is applied.
   */
  entities?: GatewayWaveEntity[];
  rewards?: GatewayRewards;
  /**
   * A list of wave modifiers that will be applied to all entities each time the modifier is applied.
   */
  modifiers?: GatewayWaveModifier[];
  /**
   * The time (in ticks) that this modifier will add/remove to/from the max wave time.
   */
  max_wave_time?: number;
  /**
   * The time (in ticks) that this modifier will add/remove to/from the setup time.
   */
  setup_time?: number;
}
/**
 * Allows for invalidating an existing gateway
 */
export interface InvalidGateway {
  __typename: "InvalidGateway";
  /**
   * @minItems 1
   * @maxItems 1
   */
  conditions: [
    {
      type: "forge:false";
    },
  ];
}
