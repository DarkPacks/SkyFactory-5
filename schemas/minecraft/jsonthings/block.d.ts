/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type JsonThingsBlock = JsonThingsBlock1 & JsonThingsBlock2;
export type JsonThingsBlock1 = {
  [k: string]: unknown;
};

export interface JsonThingsBlock2 {
  /**
   * Defines another block to copy properties from.
   */
  parent?: string;
  /**
   * Defines the type of block to construct. Each type has additional properties.
   */
  type?: string;
  /**
   * Defines the base properties of the block, along with the color that will be used in maps.
   */
  material?: string;
  /**
   * Defines the color displayed in a map, from the choices available in the map color palette.
   */
  map_color?: string | number;
  /**
   * Defines the blockstate properties contained in the mod.
   */
  properties?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[a-z]+$".
     */
    [k: string]:
      | string
      | {
          type: "boolean";
          values?: boolean;
        }
      | {
          type: "int";
          min: number;
          max: number;
        }
      | {
          type: "string";
          values: string[];
        }
      | {
          type: "direction";
          values?: string[];
        }
      | {
          type: "enum";
          values?: string[];
          class: string;
        };
  };
  /**
   * Defines the default value of each property, when the value is not provided explicitly.
   */
  default_state?: {
    [k: string]: unknown;
  };
  /**
   * Defines the name of a property that is used to rotate the voxel shapes used in collision and hit checks.
   */
  shape_rotation?: string;
  /**
   * Defines the general shape of the block, which should roughly match the model's shape.
   */
  shape?:
    | {
        x1?: number;
        y1?: number;
        z1?: number;
        x2?: number;
        y2?: number;
        z2?: number;
      }
    | number[];
  /**
   * Defines that the block is see-through and neighbour face culling should not be performed.
   */
  not_solid?: boolean;
  /**
   * Defines that the block requires using the right tool to drop loot.
   */
  requires_tool_for_drops?: boolean;
  /**
   * Defines that the block is equivalent to air.
   */
  is_air?: boolean;
  /**
   * Defines that the block prevents entities from passing through the collision box.
   */
  has_collision?: boolean;
  /**
   * Defines that the block receives random ticks. Not relevant until the scripting system is in place.
   */
  ticks_randomly?: boolean;
  /**
   * Defines the amount of light emitted by the block.
   */
  light_emission?: number;
  /**
   * Defines the amount explosion power required to break the block.
   */
  explosion_resistance?: number;
  /**
   * Defines the amount time needed to mine the block without a tool.
   */
  destroy_time?: number;
  /**
   * Defines the friction coeficient applied to changes in movement. Values close to 0 mean fast changes (high friction), while values close to 1 mean slow changes (low friction).
   */
  friction?: number;
  /**
   * Defines the speed factor applied to the maximum movement speed. A value of 1 means default speed.
   */
  speed_factor?: number;
  /**
   * Defines the jump factor applied to the maximum jump height. A value of 1 means default jump height.
   */
  jump_factor?: number;
  /**
   * Defines a color handler for the block. Color handler provides tint values based on context.
   */
  color_handler?: string;
  /**
   * Defines the sound type used to define the sound events that play when the block is placed, broken, or stepped on.
   */
  sound_type?: string;
  /**
   * Defines the block's item form.
   */
  item?:
    | boolean
    | {
        [k: string]: unknown;
      };
  /**
   * Defines that the block will be set on fire by nearby lava.
   */
  ignited_by_lava?: boolean;
  /**
   * Defines that the block must be considered solid regardless of its voxel shape. If true, the "blocks_motion" option is not used.
   */
  force_solid?: boolean;
  /**
   * If false, defines that the block must be considered non-solid regardless of its voxel shape. This option is not used if force_solid is true.
   */
  blocks_motion?: boolean;
  /**
   * Defines that the block can be deleted when placing other blocks in the same space. By default, block placement is prevented.
   */
  replaceable?: boolean;
  /**
   * Defines how the block reacts when pushed by a piston.
   */
  push_reaction?: "normal" | "block" | "destroy" | "push_only";
  tree_feature?: string;
}
