import { defaultsDeep } from "lodash";
import path from "path";
import { InControlSpawn } from "schemas/minecraft/incontrol/spawn";
import { writeJSONFile } from "scripts/utils/file";
import { MobData } from "./data-manager";

type SpawnEntry = InControlSpawn[0];

const spawnJsonPath = path.resolve(
  "./src/minecraft/config/incontrol/spawn.json",
);

function getConstants(): {
  // Entries that will be at the top (in order) and will not be touched by the generator
  initialEntries: InControlSpawn;
  // Entry for allowing spawners (omitting mob list - to be generated by script)
  spawnerAllowEntryBase: Omit<SpawnEntry, "mob">;
  // Entry for denying all other spawns (omitting mob list - to be generated by script);
  denyEntryBase: Omit<SpawnEntry, "mob">;
} {
  return {
    initialEntries: [
      {
        hostile: true,
        mincount: {
          amount: 7,
          hostile: true,
          perchunk: true,
        },
        result: "deny",
      },
      {
        mob: "minecraft:ender_dragon",
        mincount: {
          amount: 1,
          perchunk: true,
        },
        result: "deny",
      },
      {
        passive: true,
        mincount: {
          amount: 7,
          passive: true,
          perchunk: true,
        },
        result: "deny",
      },
    ],
    spawnerAllowEntryBase: {
      spawner: true,
      result: "allow",
    },
    denyEntryBase: {
      result: "deny",
    },
  };
}

export async function generateInControlSpawnConfig(data: MobData) {
  const fullMobIDList = Array.from(data)
    .map((entry) => entry.mobID)
    .sort((a, b) => a.localeCompare(b));

  const { initialEntries, spawnerAllowEntryBase, denyEntryBase } =
    getConstants();

  // 1. Add initial entries
  const result = [...initialEntries];

  // 2. Add spawner allow entry
  result.push({
    ...spawnerAllowEntryBase,
    mob: fullMobIDList,
  });

  // 3. Add all individual spawn rules for each mob
  result.push(
    ...data
      .map((entry) =>
        defaultsDeep(entry.spawnOverrides, {
          mob: entry.mobID,
          block: {
            tag: "skyfactory_5:creature_spawnable_blocks_please_work_i_swear_to_john_cena",
          },
          gamestage: entry.stage,
          armorhelmet: {
            item: "simplehats:fro",
            nbt: {
              display: {
                color: 16352035,
              },
            },
          },
          result: "allow",
          minlight_full: entry.minLightLevel,
          maxlight_full: entry.maxLightLevel,
        }),
      )
      .sort((a, b) => {
        if (typeof a.mob !== "string" || typeof b.mob !== "string") {
          console.log("Unexpected mob type for individual mob entries");
          return 0;
        }

        return a.mob.localeCompare(b.mob);
      }),
  );

  // 4. Add deny list to prevent all other spawns
  result.push({
    ...denyEntryBase,
    mob: fullMobIDList,
  });

  await writeJSONFile(spawnJsonPath, result, "json");
}
